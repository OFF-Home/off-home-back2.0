import { TreeNode, TreeNodeFields } from './types';
export declare type FindNodesResult<N extends TreeNode<V>, V> = {
    nodes: N[];
    values: V[];
};
export declare function findNodes<N extends TreeNode<V>, V = any>(root: N, targets: V[], fields?: TreeNodeFields<N>): FindNodesResult<N, V>;
export declare function findPathNodes<N extends TreeNode<V>, V = any>(root: N, targets: V[], fields?: TreeNodeFields<N>): N[];
export declare function findPath<N extends TreeNode<V>, V = any>(root: N, target: V, treeNodeFields?: TreeNodeFields<N>): N[];
export declare function findAllPaths<N extends TreeNode<V>, V = any>(root: N, target: V, treeNodeFields?: TreeNodeFields<N>): N[][];
